using System.Collections.Generic;
using System.IO;
using System.Text;
using UnityEditor;
using UnityEngine;
using SpookyCore.Runtime.EntitySystem;

namespace SpookyCore.Editor.EntitySystem
{
    public static class EntityAnimStateGenerator
    {
        private static readonly string OutputPath = Path.Combine(SpookyPathResolver.GetSpookyCorePath(), "Runtime/EntitySystem/Utils/Animation/EntityAnimState.cs");
        
        [MenuItem("SpookyTools/Entity System/Animation/Generate Animation States Enum")]
        public static void GenerateEnum()
        {
            var configs = LoadAllConfigs();
            var enumEntries = new HashSet<string> { "None" };

            foreach (var config in configs)
            {
                foreach (var clip in config.AnimationClips)
                {
                    if (!clip) continue;
                    
                    var stateName = $"{config.ID.ToString()}_{clip.name}";
                    enumEntries.Add(stateName);
                }
            }

            var sb = new StringBuilder();
            sb.AppendLine("//Auto-generated by AnimationStateEnumGenerator at SpookyTools/Entity System/Generate Animation States Enum.");
            sb.AppendLine("//DO NOT modify manually.");
            sb.AppendLine("namespace SpookyCore.EntitySystem");
            sb.AppendLine("{");
            sb.AppendLine("    public enum EntityAnimState");
            sb.AppendLine("    {");

            foreach (var entry in enumEntries)
            {
                sb.AppendLine($"        {entry},");
            }

            sb.AppendLine("    }");
            sb.AppendLine("}");

            var directory = Path.GetDirectoryName(OutputPath);
            if (!Directory.Exists(directory))
            {
                Directory.CreateDirectory(directory);
            }

            File.WriteAllText(OutputPath, sb.ToString());
            AssetDatabase.Refresh();
            Debug.Log($"<color=cyan>EntityAnimState</color> generated at: <color=cyan>{OutputPath}</color>");
        }

        private static List<EntityAnimationConfig> LoadAllConfigs()
        {
            var guids = AssetDatabase.FindAssets("t:EntityAnimationConfig");
            var configs = new List<EntityAnimationConfig>();

            foreach (var guid in guids)
            {
                var path = AssetDatabase.GUIDToAssetPath(guid);
                Debug.Log($"found: {path}");
                var asset = AssetDatabase.LoadAssetAtPath<EntityAnimationConfig>(path);
                if (asset)
                {
                    configs.Add(asset);
                }
            }

            return configs;
        }
    }
}